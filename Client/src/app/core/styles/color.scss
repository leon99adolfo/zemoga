// ===================================================================================================
// Definitions
// ===================================================================================================

$customPalettes: (
	'red': $mat-red,
	'pink': $mat-pink,
	'purple': $mat-purple,
	'deep-purple': $mat-deep-purple,
	'indigo': $mat-indigo,
	'blue': $mat-blue,
	'light-blue': $mat-light-blue,
	'cyan': $mat-cyan,
	'teal': $mat-teal,
	'green': $mat-green,
	'light-green': $mat-light-green,
	'lime': $mat-lime,
	'yellow': $mat-yellow,
	'amber': $mat-amber,
	'orange': $mat-orange,
	'deep-orange': $mat-deep-orange,
	'brown': $mat-brown,
	'grey': $mat-grey,
	'blue-grey': $mat-blue-grey
);

// Material color hues list
$matHues: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900;

// ===================================================================================================
// Methods
// ===================================================================================================
@mixin colors-theme($theme) {

	$is-dark: map-get($theme, is-dark);
	$background: map-get($theme, background);
	$foreground: map-get($theme, foreground);

	// Base colors
	& {
			color: map-get($foreground, text);

			// If it's a light theme, use a darker background
			// color other than the default #fafafa
			@if ($is-dark) {
					background: map-get($background, background);
			} @else {
					background: #F5F5F5;
			}
	}

	.secondary-text {
			color: map-get($foreground, secondary-text);
	}

	.icon,
	i {
			color: map-get($foreground, icon);
	}

	.hint-text {
			color: map-get($foreground, hint-text);
	}

	.disabled-text {
			color: map-get($foreground, disabled-text);
	}

	.fade-text,
	.divider {
			color: map-get($foreground, divider);
	}
}


@mixin generate-material-element-colors($classes, $contrast) {
	// Material element colors generator
	$foreground: (
		base: white,
		text: white,
		hint-text: rgba(white, 0.5),
		divider: rgba(white, 0.12),
	);

	// If the contrast color is dark...
	@if ($contrast == 'dark') {
		$foreground: (
			base: black,
			hint-text: rgba(black, 0.38),
			divider: rgba(black, 0.12),
		);
	}

	// Put down the color classes
	#{$classes} {
		// Native Input
		input[type="text"] {
			color: map-get($foreground, base);
		}

		// Input
		.mat-form-field-label {
			color: map-get($foreground, hint-text);
		}

		.mat-form-field-underline {
			background-color: map-get($foreground, divider); 
		}

		// Select
		.mat-select-trigger,
		.mat-select-arrow {
			color: map-get($foreground, hint-text);
		}

		.mat-select-underline {
			background-color: map-get($foreground, divider);
		}

		.mat-select-disabled .mat-select-value,
		.mat-select-arrow,
		.mat-select-trigger {
			color: map-get($foreground, hint-text);
		}

		/*.mat-select-content,
		.mat-select-panel-done-animating {
				//background: map-get($background, card);
		}*/

		.mat-select-value {
			color: map-get($foreground, text);
		}
	}
}



@mixin generate-color-classes($colorName, $color, $contrastColor, $hue) {

  .#{$colorName}#{$hue}-bg {
		background-color: $color !important;
  }

  .#{$colorName}#{$hue} {
		background-color: $color !important;
		color: $contrastColor !important;

		&[disabled] {
			background-color: rgba($color, .12) !important;
			color: rgba($contrastColor, .26) !important;
		}
  }

  .#{$colorName}#{$hue}-fg {
		color: $color !important;
  }

  .#{$colorName}#{$hue}-border {
		border-color: $color !important;
  }

  .#{$colorName}#{$hue}-border-top {
		border-top-color: $color !important;
  }

  .#{$colorName}#{$hue}-border-right {
		border-right-color: $color !important;
  }

  .#{$colorName}#{$hue}-border-bottom {
		border-bottom-color: $color !important;
  }

  .#{$colorName}#{$hue}-border-left {
		border-left-color: $color !important;
  }
}


@mixin custom-color-classes($palettes) {

	// Define contrast lists
	$light-contrasting-classes: ();
	$dark-contrasting-classes: ();

  // Generate the color classes
  @each $paletteName, $palette in $palettes {

		// Get the contrasts map
		$contrasts: map-get($palette, 'contrast');

		@each $hue in $matHues {

			// Get the color and the contrasting color
			$color: map-get($palette, $hue);
			$contrast: map-get($contrasts, $hue);

			@if ($color != null and $contrast != null) {

				// Generate color classes
				@include generate-color-classes($paletteName, $color, $contrast, '-#{$hue}');

				// If the contrast color is dark
				@if (rgba(black, 1) == rgba($contrast, 1)) {
					$dark-contrasting-classes: append($dark-contrasting-classes, unquote('.#{$paletteName}-#{$hue}'), 'comma');
				}
				@else {
					$light-contrasting-classes: append($light-contrasting-classes, unquote('.#{$paletteName}-#{$hue}'), 'comma');
				}

				// default color
				@if ($hue == 500) {
					// Generate color classes
					@include generate-color-classes($paletteName, $color, $contrast, '');

					@if (rgba(black, 1) == rgba($contrast, 1)) {
						$dark-contrasting-classes: append($dark-contrasting-classes, unquote('.#{$paletteName}'), 'comma');
					}
							// if the contrast color is light
					@else {
						$light-contrasting-classes: append($light-contrasting-classes, unquote('.#{$paletteName}'), 'comma');
					}
				}
			}
    }
  }
	
	@include generate-material-element-colors($dark-contrasting-classes, 'light');
	@include generate-material-element-colors($dark-contrasting-classes, 'dark');
}

// Adding colors
@include custom-color-classes($customPalettes);

// ============================================================================
.white-bg {
  background-color: white !important;
}

.white-fg {
  color: white !important;
}